(define (vector-filter pred vec)
  (define (get-length n)
    (cond ((< n 0) 0)
          ((pred (vector-ref vec n)) (+ 1 (get-length (- n 1))))
          (else (get-length (- n 1)))))
  (define (loop newvec vecn n)
    (if (< n 0)
        newvec
        (if (pred (vector-ref vec n))
            (begin (vector-set! newvec vecn (vector-ref vec n))
                   (loop newvec (- vecn 1) (- n 1)))
            (loop newvec vecn (- n 1)))))
  (let ((l (get-length (- (vector-length vec) 1))))
    (loop (make-vector l) (- l 1) (- (vector-length vec) 1))))