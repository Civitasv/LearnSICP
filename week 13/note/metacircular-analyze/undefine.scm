(define (undefine? exp)
  (tagged-list? exp 'undefine))

(define (undefine-variable exp)
  (cadr exp))

(define (eval-undefine exp env)
  (define (unbind-in-frame sym frame)
    (frame-remove-binding! sym frame))
  (define (env-iter sym env)
    (display sym)
    (newline)
    (cond ((eq? env the-empty-environment) 'okay)
	        ((memq sym (frame-variables (first-frame env)))
	         (unbind-in-frame sym (first-frame env)))
	        (else (env-iter sym (enclosing-environment env)))))
  (env-iter (undefine-variable exp) env))

(define (analyze-undefine exp)
  (define (unbind-in-frame sym frame)
    (frame-remove-binding! sym frame))
  (define (env-iter sym env)
    (display sym)
    (newline)
    (cond ((eq? env the-empty-environment) 'okay)
	        ((memq sym (frame-variables (first-frame env)))
	         (unbind-in-frame sym (first-frame env)))
	        (else (env-iter sym (enclosing-environment env)))))
  (let ((var (undefine-variable exp)))
    (lambda (env) (env-iter var env))))

