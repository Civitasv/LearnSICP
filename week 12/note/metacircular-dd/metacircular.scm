(load "tagged-list.scm")
(load "self-evaluating.scm")
(load "variable.scm")
(load "quotation.scm")
(load "assignment.scm")
(load "definition.scm")
(load "undefine.scm")
(load "predicate.scm")
(load "if.scm")
(load "and.scm")
(load "or.scm")
(load "let.scm")
(load "letstar.scm")
(load "lambda.scm")
(load "begin.scm")
(load "sequence.scm")
(load "cond.scm")
(load "procedure.scm")
(load "list-of-values.scm")
(load "environment.scm")
(load "primitive.scm")
(load "dds.scm")

(define (meta-eval exp env)
  (display "EXPRESSION:")
  (newline)
  (display exp)
  (newline)

  (put 'quote 'eval text-of-quotation)
  (put 'set! 'eval eval-assignment)
  (put 'define 'eval eval-definition)
  (put 'undefine 'eval eval-definition)
  (put 'if 'eval eval-if)
  (put 'and 'eval eval-and)
  (put 'or 'eval eval-or)
  (put 'let 'eval
    (lambda (exp env)
      (meta-eval (let->combination exp) env)))
  (put 'let* 'eval
    (lambda (exp env)
      (meta-eval (let*->nested-lets exp) env)))
  (put 'lambda 'eval
    (lambda (exp env)
      (make-procedure (lambda-parameters exp)
                      (lambda-body exp)
                      env)))
  (put 'begin 'eval
    (lambda (exp env)
      (eval-sequence (begin-actions exp) env)))
  (put 'cond 'eval
    (lambda (exp env)
      (meta-eval (cond->if exp) env)))
  
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        (else (let ((form (get (operator exp) 'eval)))
                (if form
                  (form exp env)
                  (meta-apply (meta-eval (operator exp) env)
                              (list-of-values (operands exp) env)))))))

(define (meta-apply procedure arguments)
  (display "APPLY")
  (newline)
  (user-print procedure)
  (newline)
  (display arguments)
  (newline)
  (cond ((primitive-procedure? procedure)
         (apply-primitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
           (procedure-body procedure)
           (extend-environment
             (procedure-parameters procedure)
             arguments
             (procedure-environment procedure))))
        (else (error "Unknown procedure type: APPLY" procedure))))
